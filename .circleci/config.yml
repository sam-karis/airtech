# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    working_directory: ~/airtech
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
        environment:
          DATABASE_URL: ${DATABASE_URL}

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
      - image: circleci/postgres:9.6.5-alpine-ram
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
          environment:
          CC_TEST_REPORTER_ID: ${CC_TEST_REPORTER_ID}


    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
            name: Setup Code Climate test-reporter
            command: |
              # download test reporter as a static binary
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
              chmod +x ./cc-test-reporter

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            tox
      
      - run:
          name: Consolidate results
          command: |
            # notify Code Climate of a pending test report using `before-build`
            # upload test report to Code Climate using `after-build`
            . venv/bin/activate
            ./cc-test-reporter before-build
            coverage xml
            coverage report
            ./cc-test-reporter format-coverage -o ./.coverage -t coverage.py
            ./cc-test-reporter upload-coverage -i .coverage
      
      - persist_to_workspace:
          root: ~/airtech
          paths: .
        
      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-reports
          destination: test-reports